//
//! Copyright © 2008
//! Brandon Kohn
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//

namespace boost
{
namespace numeric
{
namespace geometry
{

#define DIMENSION BOOST_PP_ITERATION()

/////////////////////////////////////////////////////////////////////////////
//
// CLASS point
//! A template class for specifying point which can be compile time
//! and runtime indexed conforming to random access for both and can support
//! vector arithmetic.
//!
template <typename NumericType>
class point<NumericType, DIMENSION>
    : public numeric_sequence< NumericType, DIMENSION >        
    , boost::additive< point<NumericType, DIMENSION>, vector< NumericType, DIMENSION >     // point +- numeric_sequence
    >
{
public:

    typedef numeric_sequence< NumericType, DIMENSION > sequence_type;
    typedef typename sequence_type::numeric_type       coordinate_type;

    point(){}

    //! define the constructors via the preprocessor.
    point( BOOST_PP_ENUM_PARAMS(DIMENSION, const numeric_type& a) )
        : sequence_type( BOOST_PP_ENUM_PARAMS(DIMENSION, a) )
    {
    }

    point( const typename sequence_type::numeric_array& a )
        : sequence_type( a )
    {}

    //! Operator interface    
    point operator+= ( const sequence_type& p )
    {
        sequence_type::operator +=( p );
        return *this;
    }

    // numeric_sequence operator+(numeric_sequence, const numeric_sequence&) automatically
    // generated by addable.

    point operator-= ( const sequence_type& p )
    {
        sequence_type::operator -=( p );
        return *this;
    }
    // numeric_sequence operator-(numeric_sequence, const numeric_sequence&) automatically
    // generated by subtractable.

};

template <typename N>
struct construction_traits< point<N, DIMENSION> >
{    
    static inline point<N, DIMENSION> construct( BOOST_PP_ENUM_PARAMS(DIMENSION, const N& a) )
    {
        return point<N, DIMENSION>( BOOST_PP_ENUM_PARAMS(DIMENSION, a) );
    }

    template <typename NumericSequence>
    static inline point<N, DIMENSION> construct( const NumericSequence& args )
    {
        return point<N, DIMENSION>( args );
    }
};
          
}}}//namespace boost::numeric::geometry

#undef DIMENSION
