//
//! Copyright © 2008-2011
//! Brandon Kohn
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//! NOTE: This file is automatically generated. Any CHANGES made to this
//! file will be LOST on the next generation.
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<1, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<1, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<2, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<2, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<3, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<3, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<4, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<4, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} , {get < 4 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<5, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<5, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m ) , get < 4 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} , {get < 4 , 0 > ( m )} , {get < 5 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<6, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<6, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m ) , get < 4 , 15 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m ) , get < 5 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} , {get < 4 , 0 > ( m )} , {get < 5 , 0 > ( m )} , {get < 6 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<7, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<7, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m ) , get < 4 , 15 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m ) , get < 5 , 15 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m ) , get < 6 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} , {get < 4 , 0 > ( m )} , {get < 5 , 0 > ( m )} , {get < 6 , 0 > ( m )} , {get < 7 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<8, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<8, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m ) , get < 4 , 15 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m ) , get < 5 , 15 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m ) , get < 6 , 15 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m ) , get < 7 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} , {get < 4 , 0 > ( m )} , {get < 5 , 0 > ( m )} , {get < 6 , 0 > ( m )} , {get < 7 , 0 > ( m )} , {get < 8 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<9, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<9, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m ) , get < 4 , 15 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m ) , get < 5 , 15 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m ) , get < 6 , 15 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m ) , get < 7 , 15 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m ) , get < 8 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} , {get < 4 , 0 > ( m )} , {get < 5 , 0 > ( m )} , {get < 6 , 0 > ( m )} , {get < 7 , 0 > ( m )} , {get < 8 , 0 > ( m )} , {get < 9 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<10, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<10, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m ) , get < 4 , 15 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m ) , get < 5 , 15 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m ) , get < 6 , 15 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m ) , get < 7 , 15 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m ) , get < 8 , 15 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m ) , get < 9 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} , {get < 4 , 0 > ( m )} , {get < 5 , 0 > ( m )} , {get < 6 , 0 > ( m )} , {get < 7 , 0 > ( m )} , {get < 8 , 0 > ( m )} , {get < 9 , 0 > ( m )} , {get < 10 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m ) , get < 10 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<11, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<11, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m ) , get < 4 , 15 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m ) , get < 5 , 15 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m ) , get < 6 , 15 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m ) , get < 7 , 15 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m ) , get < 8 , 15 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m ) , get < 9 , 15 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m ) , get < 10 , 14 > ( m ) , get < 10 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} , {get < 4 , 0 > ( m )} , {get < 5 , 0 > ( m )} , {get < 6 , 0 > ( m )} , {get < 7 , 0 > ( m )} , {get < 8 , 0 > ( m )} , {get < 9 , 0 > ( m )} , {get < 10 , 0 > ( m )} , {get < 11 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m ) , get < 10 , 14 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m ) , get < 11 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<12, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<12, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m ) , get < 4 , 15 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m ) , get < 5 , 15 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m ) , get < 6 , 15 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m ) , get < 7 , 15 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m ) , get < 8 , 15 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m ) , get < 9 , 15 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m ) , get < 10 , 14 > ( m ) , get < 10 , 15 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m ) , get < 11 , 14 > ( m ) , get < 11 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} , {get < 4 , 0 > ( m )} , {get < 5 , 0 > ( m )} , {get < 6 , 0 > ( m )} , {get < 7 , 0 > ( m )} , {get < 8 , 0 > ( m )} , {get < 9 , 0 > ( m )} , {get < 10 , 0 > ( m )} , {get < 11 , 0 > ( m )} , {get < 12 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m ) , get < 12 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m ) , get < 10 , 14 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m ) , get < 11 , 14 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m ) , get < 12 , 13 > ( m ) , get < 12 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<13, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<13, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m ) , get < 4 , 15 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m ) , get < 5 , 15 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m ) , get < 6 , 15 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m ) , get < 7 , 15 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m ) , get < 8 , 15 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m ) , get < 9 , 15 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m ) , get < 10 , 14 > ( m ) , get < 10 , 15 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m ) , get < 11 , 14 > ( m ) , get < 11 , 15 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m ) , get < 12 , 13 > ( m ) , get < 12 , 14 > ( m ) , get < 12 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} , {get < 4 , 0 > ( m )} , {get < 5 , 0 > ( m )} , {get < 6 , 0 > ( m )} , {get < 7 , 0 > ( m )} , {get < 8 , 0 > ( m )} , {get < 9 , 0 > ( m )} , {get < 10 , 0 > ( m )} , {get < 11 , 0 > ( m )} , {get < 12 , 0 > ( m )} , {get < 13 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m ) , get < 13 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m ) , get < 12 , 13 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m ) , get < 13 , 12 > ( m ) , get < 13 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m ) , get < 10 , 14 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m ) , get < 11 , 14 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m ) , get < 12 , 13 > ( m ) , get < 12 , 14 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m ) , get < 13 , 12 > ( m ) , get < 13 , 13 > ( m ) , get < 13 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<14, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<14, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m ) , get < 4 , 15 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m ) , get < 5 , 15 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m ) , get < 6 , 15 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m ) , get < 7 , 15 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m ) , get < 8 , 15 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m ) , get < 9 , 15 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m ) , get < 10 , 14 > ( m ) , get < 10 , 15 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m ) , get < 11 , 14 > ( m ) , get < 11 , 15 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m ) , get < 12 , 13 > ( m ) , get < 12 , 14 > ( m ) , get < 12 , 15 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m ) , get < 13 , 12 > ( m ) , get < 13 , 13 > ( m ) , get < 13 , 14 > ( m ) , get < 13 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} , {get < 4 , 0 > ( m )} , {get < 5 , 0 > ( m )} , {get < 6 , 0 > ( m )} , {get < 7 , 0 > ( m )} , {get < 8 , 0 > ( m )} , {get < 9 , 0 > ( m )} , {get < 10 , 0 > ( m )} , {get < 11 , 0 > ( m )} , {get < 12 , 0 > ( m )} , {get < 13 , 0 > ( m )} , {get < 14 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m ) , get < 14 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m ) , get < 14 , 10 > ( m ) , get < 14 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m ) , get < 13 , 12 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m ) , get < 14 , 10 > ( m ) , get < 14 , 11 > ( m ) , get < 14 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m ) , get < 12 , 13 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m ) , get < 13 , 12 > ( m ) , get < 13 , 13 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m ) , get < 14 , 10 > ( m ) , get < 14 , 11 > ( m ) , get < 14 , 12 > ( m ) , get < 14 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m ) , get < 10 , 14 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m ) , get < 11 , 14 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m ) , get < 12 , 13 > ( m ) , get < 12 , 14 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m ) , get < 13 , 12 > ( m ) , get < 13 , 13 > ( m ) , get < 13 , 14 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m ) , get < 14 , 10 > ( m ) , get < 14 , 11 > ( m ) , get < 14 , 12 > ( m ) , get < 14 , 13 > ( m ) , get < 14 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<15, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<15, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m ) , get < 4 , 15 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m ) , get < 5 , 15 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m ) , get < 6 , 15 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m ) , get < 7 , 15 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m ) , get < 8 , 15 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m ) , get < 9 , 15 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m ) , get < 10 , 14 > ( m ) , get < 10 , 15 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m ) , get < 11 , 14 > ( m ) , get < 11 , 15 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m ) , get < 12 , 13 > ( m ) , get < 12 , 14 > ( m ) , get < 12 , 15 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m ) , get < 13 , 12 > ( m ) , get < 13 , 13 > ( m ) , get < 13 , 14 > ( m ) , get < 13 , 15 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m ) , get < 14 , 10 > ( m ) , get < 14 , 11 > ( m ) , get < 14 , 12 > ( m ) , get < 14 , 13 > ( m ) , get < 14 , 14 > ( m ) , get < 14 , 15 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 1>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 1>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m )} , {get < 1 , 0 > ( m )} , {get < 2 , 0 > ( m )} , {get < 3 , 0 > ( m )} , {get < 4 , 0 > ( m )} , {get < 5 , 0 > ( m )} , {get < 6 , 0 > ( m )} , {get < 7 , 0 > ( m )} , {get < 8 , 0 > ( m )} , {get < 9 , 0 > ( m )} , {get < 10 , 0 > ( m )} , {get < 11 , 0 > ( m )} , {get < 12 , 0 > ( m )} , {get < 13 , 0 > ( m )} , {get < 14 , 0 > ( m )} , {get < 15 , 0 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 2>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 2>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 3>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 3>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 4>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 4>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 5>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 5>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m ) , get < 15 , 4 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 6>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 6>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m ) , get < 15 , 4 > ( m ) , get < 15 , 5 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 7>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 7>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m ) , get < 15 , 4 > ( m ) , get < 15 , 5 > ( m ) , get < 15 , 6 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 8>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 8>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m ) , get < 15 , 4 > ( m ) , get < 15 , 5 > ( m ) , get < 15 , 6 > ( m ) , get < 15 , 7 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 9>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 9>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m ) , get < 15 , 4 > ( m ) , get < 15 , 5 > ( m ) , get < 15 , 6 > ( m ) , get < 15 , 7 > ( m ) , get < 15 , 8 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 10>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 10>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m ) , get < 15 , 4 > ( m ) , get < 15 , 5 > ( m ) , get < 15 , 6 > ( m ) , get < 15 , 7 > ( m ) , get < 15 , 8 > ( m ) , get < 15 , 9 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 11>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 11>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m ) , get < 14 , 10 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m ) , get < 15 , 4 > ( m ) , get < 15 , 5 > ( m ) , get < 15 , 6 > ( m ) , get < 15 , 7 > ( m ) , get < 15 , 8 > ( m ) , get < 15 , 9 > ( m ) , get < 15 , 10 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 12>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 12>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m ) , get < 14 , 10 > ( m ) , get < 14 , 11 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m ) , get < 15 , 4 > ( m ) , get < 15 , 5 > ( m ) , get < 15 , 6 > ( m ) , get < 15 , 7 > ( m ) , get < 15 , 8 > ( m ) , get < 15 , 9 > ( m ) , get < 15 , 10 > ( m ) , get < 15 , 11 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 13>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 13>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m ) , get < 13 , 12 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m ) , get < 14 , 10 > ( m ) , get < 14 , 11 > ( m ) , get < 14 , 12 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m ) , get < 15 , 4 > ( m ) , get < 15 , 5 > ( m ) , get < 15 , 6 > ( m ) , get < 15 , 7 > ( m ) , get < 15 , 8 > ( m ) , get < 15 , 9 > ( m ) , get < 15 , 10 > ( m ) , get < 15 , 11 > ( m ) , get < 15 , 12 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 14>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 14>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m ) , get < 12 , 13 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m ) , get < 13 , 12 > ( m ) , get < 13 , 13 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m ) , get < 14 , 10 > ( m ) , get < 14 , 11 > ( m ) , get < 14 , 12 > ( m ) , get < 14 , 13 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m ) , get < 15 , 4 > ( m ) , get < 15 , 5 > ( m ) , get < 15 , 6 > ( m ) , get < 15 , 7 > ( m ) , get < 15 , 8 > ( m ) , get < 15 , 9 > ( m ) , get < 15 , 10 > ( m ) , get < 15 , 11 > ( m ) , get < 15 , 12 > ( m ) , get < 15 , 13 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 15>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 15>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m ) , get < 10 , 14 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m ) , get < 11 , 14 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m ) , get < 12 , 13 > ( m ) , get < 12 , 14 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m ) , get < 13 , 12 > ( m ) , get < 13 , 13 > ( m ) , get < 13 , 14 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m ) , get < 14 , 10 > ( m ) , get < 14 , 11 > ( m ) , get < 14 , 12 > ( m ) , get < 14 , 13 > ( m ) , get < 14 , 14 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m ) , get < 15 , 4 > ( m ) , get < 15 , 5 > ( m ) , get < 15 , 6 > ( m ) , get < 15 , 7 > ( m ) , get < 15 , 8 > ( m ) , get < 15 , 9 > ( m ) , get < 15 , 10 > ( m ) , get < 15 , 11 > ( m ) , get < 15 , 12 > ( m ) , get < 15 , 13 > ( m ) , get < 15 , 14 > ( m )} }};
            return r;
        }
    };
}}
namespace geometrix { namespace detail {
    
        
    template <>
    struct matrix_assigner<16, 16>
    { 
        template <std::size_t Row, typename L, typename R>
        static void assign_row(L&l,const R&r)
        {
            set<Row , 0> ( l , get<Row , 0> ( r ) ); set<Row , 1> ( l , get<Row , 1> ( r ) ); set<Row , 2> ( l , get<Row , 2> ( r ) ); set<Row , 3> ( l , get<Row , 3> ( r ) ); set<Row , 4> ( l , get<Row , 4> ( r ) ); set<Row , 5> ( l , get<Row , 5> ( r ) ); set<Row , 6> ( l , get<Row , 6> ( r ) ); set<Row , 7> ( l , get<Row , 7> ( r ) ); set<Row , 8> ( l , get<Row , 8> ( r ) ); set<Row , 9> ( l , get<Row , 9> ( r ) ); set<Row , 10> ( l , get<Row , 10> ( r ) ); set<Row , 11> ( l , get<Row , 11> ( r ) ); set<Row , 12> ( l , get<Row , 12> ( r ) ); set<Row , 13> ( l , get<Row , 13> ( r ) ); set<Row , 14> ( l , get<Row , 14> ( r ) ); set<Row , 15> ( l , get<Row , 15> ( r ) );;
        }
        template <typename L, typename R>
        static L& assign(L&l,const R&r)
        {
            assign_row< 0>(l,r); assign_row< 1>(l,r); assign_row< 2>(l,r); assign_row< 3>(l,r); assign_row< 4>(l,r); assign_row< 5>(l,r); assign_row< 6>(l,r); assign_row< 7>(l,r); assign_row< 8>(l,r); assign_row< 9>(l,r); assign_row< 10>(l,r); assign_row< 11>(l,r); assign_row< 12>(l,r); assign_row< 13>(l,r); assign_row< 14>(l,r); assign_row< 15>(l,r);;
            return l;
        }
    };
    
    template <>
    struct matrix_pod_constructor<16, 16>
    { 
        template <typename M, typename R>
        static M construct(const R& m)
        {
            M r = {{ {get < 0 , 0 > ( m ) , get < 0 , 1 > ( m ) , get < 0 , 2 > ( m ) , get < 0 , 3 > ( m ) , get < 0 , 4 > ( m ) , get < 0 , 5 > ( m ) , get < 0 , 6 > ( m ) , get < 0 , 7 > ( m ) , get < 0 , 8 > ( m ) , get < 0 , 9 > ( m ) , get < 0 , 10 > ( m ) , get < 0 , 11 > ( m ) , get < 0 , 12 > ( m ) , get < 0 , 13 > ( m ) , get < 0 , 14 > ( m ) , get < 0 , 15 > ( m )} , {get < 1 , 0 > ( m ) , get < 1 , 1 > ( m ) , get < 1 , 2 > ( m ) , get < 1 , 3 > ( m ) , get < 1 , 4 > ( m ) , get < 1 , 5 > ( m ) , get < 1 , 6 > ( m ) , get < 1 , 7 > ( m ) , get < 1 , 8 > ( m ) , get < 1 , 9 > ( m ) , get < 1 , 10 > ( m ) , get < 1 , 11 > ( m ) , get < 1 , 12 > ( m ) , get < 1 , 13 > ( m ) , get < 1 , 14 > ( m ) , get < 1 , 15 > ( m )} , {get < 2 , 0 > ( m ) , get < 2 , 1 > ( m ) , get < 2 , 2 > ( m ) , get < 2 , 3 > ( m ) , get < 2 , 4 > ( m ) , get < 2 , 5 > ( m ) , get < 2 , 6 > ( m ) , get < 2 , 7 > ( m ) , get < 2 , 8 > ( m ) , get < 2 , 9 > ( m ) , get < 2 , 10 > ( m ) , get < 2 , 11 > ( m ) , get < 2 , 12 > ( m ) , get < 2 , 13 > ( m ) , get < 2 , 14 > ( m ) , get < 2 , 15 > ( m )} , {get < 3 , 0 > ( m ) , get < 3 , 1 > ( m ) , get < 3 , 2 > ( m ) , get < 3 , 3 > ( m ) , get < 3 , 4 > ( m ) , get < 3 , 5 > ( m ) , get < 3 , 6 > ( m ) , get < 3 , 7 > ( m ) , get < 3 , 8 > ( m ) , get < 3 , 9 > ( m ) , get < 3 , 10 > ( m ) , get < 3 , 11 > ( m ) , get < 3 , 12 > ( m ) , get < 3 , 13 > ( m ) , get < 3 , 14 > ( m ) , get < 3 , 15 > ( m )} , {get < 4 , 0 > ( m ) , get < 4 , 1 > ( m ) , get < 4 , 2 > ( m ) , get < 4 , 3 > ( m ) , get < 4 , 4 > ( m ) , get < 4 , 5 > ( m ) , get < 4 , 6 > ( m ) , get < 4 , 7 > ( m ) , get < 4 , 8 > ( m ) , get < 4 , 9 > ( m ) , get < 4 , 10 > ( m ) , get < 4 , 11 > ( m ) , get < 4 , 12 > ( m ) , get < 4 , 13 > ( m ) , get < 4 , 14 > ( m ) , get < 4 , 15 > ( m )} , {get < 5 , 0 > ( m ) , get < 5 , 1 > ( m ) , get < 5 , 2 > ( m ) , get < 5 , 3 > ( m ) , get < 5 , 4 > ( m ) , get < 5 , 5 > ( m ) , get < 5 , 6 > ( m ) , get < 5 , 7 > ( m ) , get < 5 , 8 > ( m ) , get < 5 , 9 > ( m ) , get < 5 , 10 > ( m ) , get < 5 , 11 > ( m ) , get < 5 , 12 > ( m ) , get < 5 , 13 > ( m ) , get < 5 , 14 > ( m ) , get < 5 , 15 > ( m )} , {get < 6 , 0 > ( m ) , get < 6 , 1 > ( m ) , get < 6 , 2 > ( m ) , get < 6 , 3 > ( m ) , get < 6 , 4 > ( m ) , get < 6 , 5 > ( m ) , get < 6 , 6 > ( m ) , get < 6 , 7 > ( m ) , get < 6 , 8 > ( m ) , get < 6 , 9 > ( m ) , get < 6 , 10 > ( m ) , get < 6 , 11 > ( m ) , get < 6 , 12 > ( m ) , get < 6 , 13 > ( m ) , get < 6 , 14 > ( m ) , get < 6 , 15 > ( m )} , {get < 7 , 0 > ( m ) , get < 7 , 1 > ( m ) , get < 7 , 2 > ( m ) , get < 7 , 3 > ( m ) , get < 7 , 4 > ( m ) , get < 7 , 5 > ( m ) , get < 7 , 6 > ( m ) , get < 7 , 7 > ( m ) , get < 7 , 8 > ( m ) , get < 7 , 9 > ( m ) , get < 7 , 10 > ( m ) , get < 7 , 11 > ( m ) , get < 7 , 12 > ( m ) , get < 7 , 13 > ( m ) , get < 7 , 14 > ( m ) , get < 7 , 15 > ( m )} , {get < 8 , 0 > ( m ) , get < 8 , 1 > ( m ) , get < 8 , 2 > ( m ) , get < 8 , 3 > ( m ) , get < 8 , 4 > ( m ) , get < 8 , 5 > ( m ) , get < 8 , 6 > ( m ) , get < 8 , 7 > ( m ) , get < 8 , 8 > ( m ) , get < 8 , 9 > ( m ) , get < 8 , 10 > ( m ) , get < 8 , 11 > ( m ) , get < 8 , 12 > ( m ) , get < 8 , 13 > ( m ) , get < 8 , 14 > ( m ) , get < 8 , 15 > ( m )} , {get < 9 , 0 > ( m ) , get < 9 , 1 > ( m ) , get < 9 , 2 > ( m ) , get < 9 , 3 > ( m ) , get < 9 , 4 > ( m ) , get < 9 , 5 > ( m ) , get < 9 , 6 > ( m ) , get < 9 , 7 > ( m ) , get < 9 , 8 > ( m ) , get < 9 , 9 > ( m ) , get < 9 , 10 > ( m ) , get < 9 , 11 > ( m ) , get < 9 , 12 > ( m ) , get < 9 , 13 > ( m ) , get < 9 , 14 > ( m ) , get < 9 , 15 > ( m )} , {get < 10 , 0 > ( m ) , get < 10 , 1 > ( m ) , get < 10 , 2 > ( m ) , get < 10 , 3 > ( m ) , get < 10 , 4 > ( m ) , get < 10 , 5 > ( m ) , get < 10 , 6 > ( m ) , get < 10 , 7 > ( m ) , get < 10 , 8 > ( m ) , get < 10 , 9 > ( m ) , get < 10 , 10 > ( m ) , get < 10 , 11 > ( m ) , get < 10 , 12 > ( m ) , get < 10 , 13 > ( m ) , get < 10 , 14 > ( m ) , get < 10 , 15 > ( m )} , {get < 11 , 0 > ( m ) , get < 11 , 1 > ( m ) , get < 11 , 2 > ( m ) , get < 11 , 3 > ( m ) , get < 11 , 4 > ( m ) , get < 11 , 5 > ( m ) , get < 11 , 6 > ( m ) , get < 11 , 7 > ( m ) , get < 11 , 8 > ( m ) , get < 11 , 9 > ( m ) , get < 11 , 10 > ( m ) , get < 11 , 11 > ( m ) , get < 11 , 12 > ( m ) , get < 11 , 13 > ( m ) , get < 11 , 14 > ( m ) , get < 11 , 15 > ( m )} , {get < 12 , 0 > ( m ) , get < 12 , 1 > ( m ) , get < 12 , 2 > ( m ) , get < 12 , 3 > ( m ) , get < 12 , 4 > ( m ) , get < 12 , 5 > ( m ) , get < 12 , 6 > ( m ) , get < 12 , 7 > ( m ) , get < 12 , 8 > ( m ) , get < 12 , 9 > ( m ) , get < 12 , 10 > ( m ) , get < 12 , 11 > ( m ) , get < 12 , 12 > ( m ) , get < 12 , 13 > ( m ) , get < 12 , 14 > ( m ) , get < 12 , 15 > ( m )} , {get < 13 , 0 > ( m ) , get < 13 , 1 > ( m ) , get < 13 , 2 > ( m ) , get < 13 , 3 > ( m ) , get < 13 , 4 > ( m ) , get < 13 , 5 > ( m ) , get < 13 , 6 > ( m ) , get < 13 , 7 > ( m ) , get < 13 , 8 > ( m ) , get < 13 , 9 > ( m ) , get < 13 , 10 > ( m ) , get < 13 , 11 > ( m ) , get < 13 , 12 > ( m ) , get < 13 , 13 > ( m ) , get < 13 , 14 > ( m ) , get < 13 , 15 > ( m )} , {get < 14 , 0 > ( m ) , get < 14 , 1 > ( m ) , get < 14 , 2 > ( m ) , get < 14 , 3 > ( m ) , get < 14 , 4 > ( m ) , get < 14 , 5 > ( m ) , get < 14 , 6 > ( m ) , get < 14 , 7 > ( m ) , get < 14 , 8 > ( m ) , get < 14 , 9 > ( m ) , get < 14 , 10 > ( m ) , get < 14 , 11 > ( m ) , get < 14 , 12 > ( m ) , get < 14 , 13 > ( m ) , get < 14 , 14 > ( m ) , get < 14 , 15 > ( m )} , {get < 15 , 0 > ( m ) , get < 15 , 1 > ( m ) , get < 15 , 2 > ( m ) , get < 15 , 3 > ( m ) , get < 15 , 4 > ( m ) , get < 15 , 5 > ( m ) , get < 15 , 6 > ( m ) , get < 15 , 7 > ( m ) , get < 15 , 8 > ( m ) , get < 15 , 9 > ( m ) , get < 15 , 10 > ( m ) , get < 15 , 11 > ( m ) , get < 15 , 12 > ( m ) , get < 15 , 13 > ( m ) , get < 15 , 14 > ( m ) , get < 15 , 15 > ( m )} }};
            return r;
        }
    };
}}
